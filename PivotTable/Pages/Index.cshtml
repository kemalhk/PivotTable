@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="text-center">

    <h1 class="display-4">InvoiceList</h1>
</div>
<div id="test">
</div>
<table class="table table-sm">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.InvoiceList[0].InvoiceNumber)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.InvoiceList[0].Amount)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.InvoiceList[0].CostCategory)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.InvoiceList[0].Period)
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.InvoiceList)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.InvoiceNumber)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Amount)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CostCategory)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Period)
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="container">

    <div id="pivotoutput" style="margin:30px;"></div>
</div>
<div class="container">

    <div id="output" style="margin:30px;"></div>
</div><div class="container">

    <div id="outputtest" style="margin:30px;"></div>
</div>

@*//pivot table*@
<script type="text/javascript">


    var myInvoiceDetails = [];

    function drawPivot() {
        $(function () {
            $("#pivotoutput").pivotUI(
                myInvoiceDetails,
                {
                    rows: ["CostCategory"],
                    cols: ["Period"],
                    vals: ["Amount"],
                    aggregatorName: "Sum"
                }
            );
        });
    }

    function getPivot() {
        return fetch('./Index?handler=InvoicePivotData', {
            method: 'get',
            headers: {
                'Content-Type': 'application/json;charset=UTF-8'
            }
        })
            .then(function (response) {
                if (response.ok) {
                    return response.text();
                } else {
                    throw new Error("Response Not OK");
                }
            })
            .then(function (text) {
                try {
                    return JSON.parse(text);
                } catch (err) {
                    throw new Error("Error Parsing JSON");
                }
            })
            .then(function (responseJson) {
                myInvoiceDetails = responseJson;
                drawPivot();
            })
            .catch(function (error) {
                console.error("Error: " + error.message);
            });
    }


    getPivot();
</script>

<script>
    $(function () {

        var derivers = $.pivotUtilities.derivers;
        var renderers = $.extend($.pivotUtilities.renderers,
            $.pivotUtilities.plotly_renderers);

        $.getJSON("/json/FileName.json", function (mps) {
            $("#output").pivotUI(mps, {
                renderers: renderers,
                cols: ["Party"], rows: ["Province"],
                rendererName: "Horizontal Stacked Bar Chart",
                rowOrder: "value_a_to_z", colOrder: "value_z_to_a",
            });
        });
    });
</script>

@*<script>
    $(function () {
        $.getJSON("/json/FileName.json", function (mps) {
            $("#outputtest").pivotUI(mps, {
                renderers: $.pivotUtilities,
                cols: [], rows: ["Province", "Party"],
                rendererName: "Treemap"
            });
        });
    });
</script>*@
<script>
    $(function () {

        var derivers = $.pivotUtilities.derivers;
        var renderers = $.extend($.pivotUtilities.renderers,
            $.pivotUtilities.c3_renderers);

        $.getJSON("/json/FileName.json", function (mps) {
            $("#outputtest").pivotUI(mps, {
                renderers: renderers,
                cols: ["Party"], rows: ["Province"],
                rendererName: "Horizontal Stacked Bar Chart",
                rowOrder: "value_z_to_a", colOrder: "value_z_to_a",
                rendererOptions: {
                    c3: {
                        data: {
                            colors: {
                                Liberal: '#dc3912', Conservative: '#3366cc', NDP: '#ff9900',
                                Green: '#109618', 'Bloc Quebecois': '#990099'
                            }
                        }
                    }
                }
            });
        });
    });

</script>
            